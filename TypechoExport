import org.apache.commons.lang3.StringEscapeUtils
import org.jetbrains.exposed.sql.Database
import org.jetbrains.exposed.sql.Table
import org.jetbrains.exposed.sql.and
import org.jetbrains.exposed.sql.select
import org.jetbrains.exposed.sql.transactions.transaction
import java.io.File
import java.nio.file.Files
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

//need exposed and mysql driver
class TypechoExport {

    object Contents : Table("typecho_contents") {
        val cid = integer("cid").primaryKey()
        val title = varchar("title", 200).nullable()
        val slug = varchar("slug", 200).nullable()
        val created = integer("created").nullable()
        val modified = integer("modified").nullable()
        val text = text("text").nullable()
        val order = integer("order").nullable()
        val authorId = integer("authorId").nullable()
        val template = varchar("template", 32).nullable()
        val type = varchar("type", 16).nullable()
        val status = varchar("status", 16).nullable()
        val password = varchar("password", 32).nullable()
        val commentsNum = integer("commentsNum").nullable()
        val allowComment = char("allowComment").nullable()
        val allowPing = char("allowPing").nullable()
        val allowFeed = char("allowFeed").nullable()
        val parent = integer("parent").nullable()
    }


    companion object {

        @JvmStatic
        fun main(args: Array<String>) {
            val database = Database.connect("jdbc:mysql://host:3306/blog?useSSL=false&useUnicode=true&characterEncoding=UTF-8",
                    driver = "com.mysql.jdbc.Driver",
                    user = "user",
                    password = "password") //todo

            val file = File("typecho")
            if (!file.exists()) {
                file.mkdir()
            }

            transaction {
                Contents.select {
                    Contents.type eq "post" and (Contents.status eq "publish")

                }.forEach {
                    val title = StringEscapeUtils.unescapeHtml4(it[title])
                    val fileName = title
                    val createDateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(it[created]!!.toLong()), ZoneId.systemDefault())
                    val modifyDateTime = LocalDateTime.ofInstant(Instant.ofEpochSecond(it[modified]!!.toLong()), ZoneId.systemDefault())
                    val s = it[text] ?: ""
                    if (s.startsWith("<!--markdown-->")) {
                        val md =
                                """
---
slug: "${it[slug]}"
create: ${createDateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
date: ${modifyDateTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))}
---

                        """.trimIndent() + s.drop(15)
                        try {
                            Files.write(File(file, "$fileName.md").toPath(), md.toByteArray())
                        } catch (e: Exception) {
                            println(fileName)
                        }
                        //markdown
                    } else {
                        //html
                        try {
                            Files.write(File(file, "$fileName.html").toPath(), s.toByteArray())
                        } catch (e: Exception) {
                            println(fileName)
                        }
                    }

                }
            }


        }
    }

}